{"version":3,"sources":["components/Section.jsx","components/Notification.jsx","components/FeedbackOptions.jsx","components/Statistics.jsx","App.js","index.js"],"names":["Section","title","children","Notification","message","FeedbackOptions","options","onLeaveFeedback","className","map","option","key","onClick","Statistics","good","neutral","bad","total","positivePercentage","App","state","buttonHandlers","value","stateValueName","stateValue","setState","props","step","Object","values","this","reduce","sum","current","Math","round","countTotalFeedback","totalVotes","PositiveVotes","countPositiveFeedbackPercentage","keys","isNaN","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPASeA,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,iCACE,4BAAKD,GACJC,ICDUC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAKA,ICS5BC,EATS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,yBAAKC,UAAU,mBACZF,EAAQG,KAAI,SAACC,GAAD,OACX,4BAAQC,IAAKD,EAAQE,QAAS,kBAAML,EAAgBG,KACjDA,QCMMG,EAVI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,4BACE,qCAAWJ,GACX,wCAAcC,GACd,oCAAUC,GACV,sCAAYC,GACZ,oDAA0BC,EAA1B,OCDEC,E,4MAKJC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,eAAiB,SAACC,EAAOC,GACvB,IAAKA,KAAkB,EAAKH,MAC1B,GAAIG,IAAmBD,EAAO,CAC5B,IAAME,EAAa,EAAKJ,MAAMG,GAC9B,EAAKE,SAAL,eAAiBF,EAAiBC,EAAa,EAAKE,MAAMC,S,mEAK9D,OAAQC,OAAOC,OAAOC,KAAKV,OAAOW,QAAO,SAACC,EAAKC,GAC7C,OAAOD,EAAMC,IACZ,K,wDAGH,OAAQC,KAAKC,MACVL,KAAKV,MAAMN,KAAOgB,KAAKM,qBAAwB,O,+BAKlD,IAAMC,EAAaP,KAAKM,qBAElBE,EAAgBR,KAAKS,kCAE3B,OACE,6BACE,kBAAC,EAAD,CAAStC,MAAM,yBACb,kBAAC,EAAD,CACEK,QAASsB,OAAOY,KAAKV,KAAKV,OAC1Bb,gBAAiBuB,KAAKT,kBAGzBoB,MAAMH,GACL,kBAAC,EAAD,CAAclC,QAAQ,sBAEtB,kBAAC,EAAD,CAASH,MAAM,aACb,kBAAC,EAAD,CACEa,KAAMgB,KAAKV,MAAMN,KACjBC,QAASe,KAAKV,MAAML,QACpBC,IAAKc,KAAKV,MAAMJ,IAChBC,MAAOoB,EACPnB,mBAAoBoB,U,GApDhBI,aAAZvB,EACGwB,aAAe,CAAEhB,KAAM,GA4DjBR,QC9DfyB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.a5b06ef6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nexport default Section;\n","import React from \"react\";\n\nconst Notification = ({ message }) => <h2>{message}</h2>;\n\nexport default Notification;\n","import React from \"react\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <div className=\"FeedbackOptions\">\n    {options.map((option) => (\n      <button key={option} onClick={() => onLeaveFeedback(option)}>\n        {option}\n      </button>\n    ))}\n  </div>\n);\nexport default FeedbackOptions;\n","import React from \"react\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <ul>\n    <li>Good: {good}</li>\n    <li>Neutral: {neutral}</li>\n    <li>Bad: {bad}</li>\n    <li>Total: {total}</li>\n    <li>Positive persentage: {positivePercentage}%</li>\n  </ul>\n);\n\nexport default Statistics;\n","import React, { Component } from \"react\";\n\nimport Section from \"./components/Section\";\nimport Notification from \"./components/Notification\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\n\nclass App extends Component {\n  static defaultProps = { step: 1 };\n\n  static propTypes = {};\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  buttonHandlers = (value, stateValueName) => {\n    for (stateValueName in this.state) {\n      if (stateValueName === value) {\n        const stateValue = this.state[stateValueName];\n        this.setState({ [stateValueName]: stateValue + this.props.step });\n      }\n    }\n  };\n  countTotalFeedback() {\n    return (Object.values(this.state).reduce((sum, current) => {\n      return sum + current;\n    }, 0));\n  }\n  countPositiveFeedbackPercentage() {\n    return (Math.round(\n      (this.state.good / this.countTotalFeedback()) * 100\n    ));\n  }\n\n  render() {\n    const totalVotes = this.countTotalFeedback();\n\n    const PositiveVotes = this.countPositiveFeedbackPercentage();\n\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.buttonHandlers}\n          ></FeedbackOptions>\n        </Section>\n        {isNaN(PositiveVotes) ? (\n          <Notification message=\"No feedback given\"></Notification>\n        ) : (\n          <Section title=\"Statisics\">\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={totalVotes}\n              positivePercentage={PositiveVotes}\n            ></Statistics>\n          </Section>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}